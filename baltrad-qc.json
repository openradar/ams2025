{"version":2,"kind":"Notebook","sha256":"ae5e5279b7f8c7e69aff93634d8cd9c8cddad992ee5073762fa3056415c8c21a","slug":"baltrad-qc","location":"/notebooks/baltrad/baltrad_short_course/1_BALTRAD_QC.ipynb","dependencies":[],"frontmatter":{"title":"Quality Control","content_includes_title":false,"authors":[{"nameParsed":{"literal":"Alfonso Ladino","given":"Alfonso","family":"Ladino"},"name":"Alfonso Ladino","orcid":"0000-0001-8081-7827","github":"aladinor","id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Anna del Moral Méndez","given":"Anna","non_dropping_particle":"del","family":"Moral Méndez"},"name":"Anna del Moral Méndez","orcid":"0000-0002-5015-840X","id":"contributors-myst-generated-uid-1"},{"nameParsed":{"literal":"Brenda Javornik","given":"Brenda","family":"Javornik"},"name":"Brenda Javornik","orcid":"0009-0004-9266-9293","github":"leavesntwigs","id":"contributors-myst-generated-uid-2"},{"nameParsed":{"literal":"Daniel Michelson","given":"Daniel","family":"Michelson"},"name":"Daniel Michelson","orcid":"0000-0003-3222-9881","github":"DanielMichelson","id":"contributors-myst-generated-uid-3"},{"nameParsed":{"literal":"Daniel Wolfensberger","given":"Daniel","family":"Wolfensberger"},"name":"Daniel Wolfensberger","orcid":"0009-0006-1419-0556","github":"wolfidan","id":"contributors-myst-generated-uid-4"},{"nameParsed":{"literal":"Gionata Ghiggi","given":"Gionata","family":"Ghiggi"},"name":"Gionata Ghiggi","orcid":"0000-0002-0818-0865","github":"ghiggi","id":"contributors-myst-generated-uid-5"},{"nameParsed":{"literal":"Jen DeHart","given":"Jen","family":"DeHart"},"name":"Jen DeHart","orcid":"0000-0001-8536-4927","github":"jcdehart","id":"contributors-myst-generated-uid-6"},{"nameParsed":{"literal":"Jordi Figueras i Ventura","given":"Jordi Figueras","non_dropping_particle":"i","family":"Ventura"},"name":"Jordi Figueras i Ventura","orcid":"0000-0002-4949-422X","github":"jfigui","id":"contributors-myst-generated-uid-7"},{"nameParsed":{"literal":"Julian Giles","given":"Julian","family":"Giles"},"name":"Julian Giles","orcid":"0000-0001-8134-008X","github":"JulianGiles","id":"contributors-myst-generated-uid-8"},{"nameParsed":{"literal":"Kai Mühlbauer","given":"Kai","family":"Mühlbauer"},"name":"Kai Mühlbauer","orcid":"0000-0001-6599-1034","github":"kmuehlbauer","id":"contributors-myst-generated-uid-9"},{"nameParsed":{"literal":"Maxwell Grover","given":"Maxwell","family":"Grover"},"name":"Maxwell Grover","orcid":"0000-0002-0370-8974","github":"mgrover1","id":"contributors-myst-generated-uid-10"},{"nameParsed":{"literal":"Mike Dixon","given":"Mike","family":"Dixon"},"name":"Mike Dixon","orcid":"0000-0002-9597-9113","github":"mike-dixon","id":"contributors-myst-generated-uid-11"},{"nameParsed":{"literal":"Robert Jackson","given":"Robert","family":"Jackson"},"name":"Robert Jackson","orcid":"0000-0003-2518-1234","github":"rcjackson","id":"contributors-myst-generated-uid-12"},{"nameParsed":{"literal":"Scott Collis","given":"Scott","family":"Collis"},"name":"Scott Collis","orcid":"0000-0002-2303-687X","github":"scollis","id":"contributors-myst-generated-uid-13"},{"nameParsed":{"literal":"Ting-Yu Cha","given":"Ting-Yu","family":"Cha"},"name":"Ting-Yu Cha","orcid":"0000-0002-6292-8483","github":"tingyucha","id":"contributors-myst-generated-uid-14"}],"open_access":true,"license":{"content":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true},"code":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/openradar/erad2024","copyright":"2024","abbreviations":{"ARM":"Atmospheric Radiation Measurement","NCAR":"National Center for Atmospheric Research"},"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"exports":[{"format":"ipynb","filename":"1_BALTRAD_QC.ipynb","url":"/ams2025/build/1_BALTRAD_QC-5229280469c01dec38e5d980f36c2086.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"retriev data from s3 bucket","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"woQG2IUmIp"}],"identifier":"retriev-data-from-s3-bucket","label":"retriev data from s3 bucket","html_id":"retriev-data-from-s3-bucket","implicit":true,"key":"jBlsj6Vb5i"}],"key":"xbIQiMgmP8"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import os\nimport urllib.request\nfrom pathlib import Path\n\n# Set the URL for the cloud\nURL = \"https://js2.jetstream-cloud.org:8001/\"\npath = \"pythia/radar/erad2024/baltrad/baltrad_short_course/\"\n!mkdir -p data\nfiles = [\"201405190715_SUR.h5\", \"plrze_pvol_20120205T0430Z.h5\", \"sekir.h5\"]\nfor file in files:\n    file0 = os.path.join(path, file)\n    name = os.path.join(\"data\", Path(file).name)\n    if not os.path.exists(name):\n        print(f\"downloading, {name}\")\n        urllib.request.urlretrieve(\n            f\"{URL}{file0}\", os.path.join(\"data\", Path(file).name)\n        )","key":"phvimIwWMP"},{"type":"output","id":"zlFhlCyMDhIvFcf7p_C-J","data":[],"key":"d4SO5LpCsS"}],"key":"ubSK79pbAD"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Import the file I/O module along with the main RAVE module containing useful constants","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AffyL0Ds0G"}],"identifier":"import-the-file-i-o-module-along-with-the-main-rave-module-containing-useful-constants","label":"Import the file I/O module along with the main RAVE module containing useful constants","html_id":"import-the-file-i-o-module-along-with-the-main-rave-module-containing-useful-constants","implicit":true,"key":"x9S1raIeZi"}],"key":"dylw9wygWM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"%matplotlib inline\nimport matplotlib\nimport _raveio, _rave","key":"gvhwjJjuqw"},{"type":"output","id":"HrGqOoeffYteEc9Uzs5EC","data":[],"key":"AipljHfUlm"}],"key":"AakL0GLGhM"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Read an input ODIM_H5 file","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TnasHSgQWO"}],"identifier":"read-an-input-odim-h5-file","label":"Read an input ODIM_H5 file","html_id":"read-an-input-odim-h5-file","implicit":true,"key":"SOZhyDzd88"}],"key":"jZsMKFUH0e"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"rio = _raveio.open(\"data/201405190715_SUR.h5\")","key":"Ib2ugpKfN0"},{"type":"output","id":"CPGHyh4e3ZHFmoD4LJPvO","data":[],"key":"BEwF7cVkdg"}],"key":"R9aTevnjW3"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Create a simple plotter for B-scans, elaborating the example from the I/O exercise","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"e5Zxo24ErU"}],"identifier":"create-a-simple-plotter-for-b-scans-elaborating-the-example-from-the-i-o-exercise","label":"Create a simple plotter for B-scans, elaborating the example from the I/O exercise","html_id":"create-a-simple-plotter-for-b-scans-elaborating-the-example-from-the-i-o-exercise","implicit":true,"key":"QkXEaeNdi6"}],"key":"K48YL4TPBF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# Two color palettes, one used in GoogleMapsPlugin, and the other from RAVE\nfrom GmapColorMap import dbzh as dbzp\nfrom rave_win_colors import continuous_MS as vradp\n\n\n# Convert a 768-list palette to a matplotlib colorlist\ndef make_colorlist(pal):\n    colorlist = []\n    for i in range(0, len(pal), 3):\n        colorlist.append([pal[i] / 255.0, pal[i + 1] / 255.0, pal[i + 2] / 255.0])\n    return colorlist\n\n\n# Convert lists to colormaps\ndbzcl = make_colorlist(dbzp)\nvradcl = make_colorlist(vradp)\n\n# Then create a simple plotter\nimport matplotlib.pyplot as plt\n\n# from types import StringType\nStringType = type(\"\")\n\n\ndef plot(data, colorlist=dbzcl, title=\"B-scan\"):\n    mini, maxi = data.shape.index(min(data.shape)), data.shape.index(max(data.shape))\n    figsize = (16, 12) if mini == 0 else (12, 8)\n    fig = plt.figure(figsize=figsize)\n    plt.title(title)\n    clist = (\n        colorlist\n        if type(colorlist) == StringType\n        else matplotlib.colors.ListedColormap(colorlist)\n    )\n    plt.imshow(data, cmap=clist, clim=(0, 255))\n    plt.colorbar(shrink=float(data.shape[mini]) / data.shape[maxi])","key":"jV0mqvOJdZ"},{"type":"output","id":"350Hsv_Zbes4p8MgBfw_x","data":[],"key":"hgO2UGXHM3"}],"key":"g7iror9Qvx"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Access the polar volume and plot VRAD data from the lowest scan","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TCFXdfruC2"}],"identifier":"access-the-polar-volume-and-plot-vrad-data-from-the-lowest-scan","label":"Access the polar volume and plot VRAD data from the lowest scan","html_id":"access-the-polar-volume-and-plot-vrad-data-from-the-lowest-scan","implicit":true,"key":"oWMzqLMSLR"}],"key":"o3aXEn2hpM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"pvol = rio.object\nplot(pvol.getScan(0).getParameter(\"VRADH\").getData(), vradcl, \"Original VRAD\")","key":"BnIvu04fGp"},{"type":"output","id":"Df-BusCe3IdFvrA35Z1vI","data":[],"key":"zSMB0SvEBk"}],"key":"kIIQaB91OE"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Dealias the volume","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GsYlIrgOvp"}],"identifier":"dealias-the-volume","label":"Dealias the volume","html_id":"dealias-the-volume","implicit":true,"key":"wI5M09N8hR"}],"key":"g2eabNc79L"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import _dealias\n\nret = _dealias.dealias(pvol)","key":"aw8sRDricN"},{"type":"output","id":"XcuAYJzQif3vucAA8htMP","data":[],"key":"TQkxBi0WrT"}],"key":"Q1LLTIOxox"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Check whether the first scan’s been dealiased","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qNsjG9fVMT"}],"identifier":"check-whether-the-first-scans-been-dealiased","label":"Check whether the first scan’s been dealiased","html_id":"check-whether-the-first-scans-been-dealiased","implicit":true,"key":"OBRbFyeFrg"}],"key":"ufq07kZ0mr"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"print(\"This first scan is dealiased: %s\" % str(_dealias.dealiased(pvol.getScan(0))))","key":"InBFNDuVh8"},{"type":"output","id":"4YDBaxqtnxG5_8vQIPH6x","data":[],"key":"Zk9J7wudyQ"}],"key":"UmGG33IqUS"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Replot for comparison","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Gt25xt9uJU"}],"identifier":"replot-for-comparison","label":"Replot for comparison","html_id":"replot-for-comparison","implicit":true,"key":"YMcGIat63E"}],"key":"tRWNGk9afT"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot(pvol.getScan(0).getParameter(\"VRADH\").getData(), vradcl, \"Dealiased VRAD\")","key":"y2PWVecqgW"},{"type":"output","id":"lwwtY_5IO0Hc0V8WJJhfR","data":[],"key":"YFpKTytz7V"}],"key":"qajeE1D5yI"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Shift gears - back to reflectivity","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"m5ZFpt7CfD"}],"identifier":"shift-gears-back-to-reflectivity","label":"Shift gears - back to reflectivity","html_id":"shift-gears-back-to-reflectivity","implicit":true,"key":"SGi78vnYqS"}],"key":"BFWc0Ugy10"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"rio = _raveio.open(\"data/plrze_pvol_20120205T0430Z.h5\")\npvol = rio.object\nplot(pvol.getScan(0).getParameter(\"DBZH\").getData(), title=\"Original DBZH\")","key":"uCAQG7QoCJ"},{"type":"output","id":"hr4rFuq13qaTqfMmVQfwy","data":[],"key":"Fa5GPkwT7i"}],"key":"MoJhg9ScFN"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Use the bRopo package’s quality plugin to identify and remove non-precipitation echoes","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ksndtQQTru"}],"identifier":"use-the-bropo-packages-quality-plugin-to-identify-and-remove-non-precipitation-echoes","label":"Use the bRopo package’s quality plugin to identify and remove non-precipitation echoes","html_id":"use-the-bropo-packages-quality-plugin-to-identify-and-remove-non-precipitation-echoes","implicit":true,"key":"ilZ1ZFl2NO"}],"key":"DeheMjMnQD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import odc_polarQC\nimport warnings\n\nwarnings.filterwarnings(\"ignore\")  # Suppress SyntaxWarning from Python2 code\n\nodc_polarQC.algorithm_ids = [\"ropo\"]\npvol = odc_polarQC.QC(pvol)","key":"denN8vJtvl"},{"type":"output","id":"vVLC-8bB18HClr7xkSvRE","data":[],"key":"upEvq2ovqX"}],"key":"hmMASW6nRq"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot the resulting DBZH","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lBmxZLnbtI"}],"identifier":"plot-the-resulting-dbzh","label":"Plot the resulting DBZH","html_id":"plot-the-resulting-dbzh","implicit":true,"key":"aHhHh5gFhf"}],"key":"rMvdxlXwVU"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"plot(pvol.getScan(0).getParameter(\"DBZH\").getData(), title=\"DBZH after bRopo\")","key":"YXzpYoGe7K"},{"type":"output","id":"iKJafKW0PPWawE2FR94oS","data":[],"key":"fyK1YJjBEM"}],"key":"Meh1Po2ogy"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Topographical beam-blockage QC using the beamb package’s quality plugin","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Z3h32FyvfF"}],"identifier":"topographical-beam-blockage-qc-using-the-beamb-packages-quality-plugin","label":"Topographical beam-blockage QC using the beamb package’s quality plugin","html_id":"topographical-beam-blockage-qc-using-the-beamb-packages-quality-plugin","implicit":true,"key":"EGjv4hlEwl"}],"key":"UVt35ddV7v"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import time\n\nodc_polarQC.algorithm_ids = [\"beamb\"]\nbefore = time.time()\npvol = odc_polarQC.QC(pvol)\nafter = time.time()\nprint(\"beamb runtime = %2.2f seconds\" % (after - before))","key":"nwMDa5AClv"},{"type":"output","id":"WpuBYCC1JSBFH5YbZCvBe","data":[],"key":"kkjHjlYk9g"}],"key":"v1z07ZiqAv"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Probability of overshooting","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LdFF585QJH"}],"identifier":"probability-of-overshooting","label":"Probability of overshooting","html_id":"probability-of-overshooting","implicit":true,"key":"uR8V75jBYJ"}],"key":"dg3cPc6nkc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"odc_polarQC.algorithm_ids = [\"rave-overshooting\"]\npvol = odc_polarQC.QC(pvol)","key":"w2hNYZeSkX"},{"type":"output","id":"XPFQXl-TMPmQ9qbZQNlq6","data":[],"key":"tfuQOD14U8"}],"key":"DqnX9ahcoM"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Accessing and manging data quality fields","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yRjS4ketI9"}],"identifier":"accessing-and-manging-data-quality-fields","label":"Accessing and manging data quality fields","html_id":"accessing-and-manging-data-quality-fields","implicit":true,"key":"d5F3qI4bnF"}],"key":"vVI68MB7ap"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"scan = pvol.getScan(0)\nprint(\"Scan contains %i quality fields\" % scan.getNumberOfQualityFields())","key":"GGjrYjHQyq"},{"type":"output","id":"YANDudhOR4NFBwle5rkM7","data":[],"key":"mZDT2dlPH0"}],"key":"D8EcfJgbs1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"for i in range(scan.getNumberOfQualityFields()):\n    qf = scan.getQualityField(i)\n    print(\"Quality field %i has identifier %s\" % (i, qf.getAttribute(\"how/task\")))","key":"XTsU8YWfxw"},{"type":"output","id":"30U42J8CkqlDnvH9_Gtos","data":[],"key":"bDitjADwa8"}],"key":"qP5oeal6Q3"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot quality fields","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"m30zyjGqUa"}],"identifier":"plot-quality-fields","label":"Plot quality fields","html_id":"plot-quality-fields","implicit":true,"key":"APIo2kNqbW"}],"key":"JMqgf3IxEv"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Beam blockage","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZXASsA3b3m"}],"identifier":"beam-blockage","label":"Beam blockage","html_id":"beam-blockage","implicit":true,"key":"WJBsdS0C9s"}],"key":"n9ckkXx9dx"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"bb = scan.getQualityFieldByHowTask(\"se.smhi.detector.beamblockage\")\nplot(bb.getData(), \"binary\", \"Quality indicator for beam blockage\")","key":"UdJfBBJnsR"},{"type":"output","id":"sOAHWuRA5JHo-_F0jHmcP","data":[],"key":"Mux5cYmY1K"}],"key":"QXeQG4qqpf"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Probability of non-precipitation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PfSSZ6Fw9e"}],"identifier":"probability-of-non-precipitation","label":"Probability of non-precipitation","html_id":"probability-of-non-precipitation","implicit":true,"key":"eWC6izmGTD"}],"key":"xQYcSCABqv"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"bb = scan.getQualityFieldByHowTask(\"fi.fmi.ropo.detector.classification\")\nplot(bb.getData(), \"binary\", \"Quality indicator for ropo\")","key":"WQiC7f291Q"},{"type":"output","id":"x7ch9OjnD5aE-KhTtIqO_","data":[],"key":"WZAE7jtyog"}],"key":"qB8sz3zAvZ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Probability of overshooting","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ICXBKvdJLH"}],"identifier":"probability-of-overshooting","label":"Probability of overshooting","html_id":"probability-of-overshooting-1","implicit":true,"key":"dA1zHsBzat"}],"key":"B2PafqStrD"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"bb = scan.getQualityFieldByHowTask(\"se.smhi.detector.poo\")\nplot(bb.getData(), \"binary\", \"Quality indicator for PoO\")","key":"R0Coz4hr3u"},{"type":"output","id":"HfUf1mzf-lvHhh5vYYuG-","data":[],"key":"mgw6HRSOlC"}],"key":"wRYjesbvpL"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Chaining algorithms - new data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zHeJGR1EUF"}],"identifier":"chaining-algorithms-new-data","label":"Chaining algorithms - new data","html_id":"chaining-algorithms-new-data","implicit":true,"key":"suJGPFH72A"}],"key":"kkIOiYni1F"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"rio = _raveio.open(\"data/sekir.h5\")\npvol = rio.object\n\nodc_polarQC.algorithm_ids = [\n    \"ropo\",\n    \"beamb\",\n    \"radvol-att\",\n    \"radvol-broad\",\n    \"rave-overshooting\",\n]\npvol = odc_polarQC.QC(pvol)","key":"SLHilpTwgu"},{"type":"output","id":"BXxqBFvpgricxehxBISc3","data":[],"key":"o4uBHTK2T0"}],"key":"q8hzWVLim3"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"scan = pvol.getScan(0)\natt = scan.getQualityField(2)\nplot(att.getData(), \"binary\", \"Attenuation\")","key":"LGKsaUyAWf"},{"type":"output","id":"xzSZumWWFt6-Afm_Ujp1h","data":[],"key":"rMvz9VM9cD"}],"key":"H4X9k94zsv"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"“Total Quality”","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"dtOzzfVRhE"}],"identifier":"total-quality","label":"“Total Quality”","html_id":"total-quality","implicit":true,"key":"sV11azvbVk"}],"key":"VDZGTszD37"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"odc_polarQC.algorithm_ids = [\"qi-total\"]\npvol = odc_polarQC.QC(pvol)","key":"Gmh2koaqvZ"},{"type":"output","id":"_ioMxYChCqccyXGDq6ew2","data":[],"key":"hNEgBFjZdg"}],"key":"I9Cj4pfie0"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"qitot = scan.getQualityField(5)\nplot(qitot.getData(), \"binary\", \"Total quality index\")","key":"ejPPB1VS32"},{"type":"output","id":"-Qg8_R5hcWcKpRbeGzqBV","data":[],"key":"mxHR29QtrP"}],"key":"hX8MoPtus3"}],"key":"byQnGWtQRj"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"I/O model","url":"/baltrad-io","group":"BALTRAD"},"next":{"title":"Quality Control using DR","url":"/baltrad-drqc","group":"BALTRAD"}}},"domain":"http://localhost:3000"}