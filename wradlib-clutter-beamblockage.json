{"version":2,"kind":"Notebook","sha256":"d21c2ce915ceaa1f311c1eae327095f631c5ba205dc67537c9e158286a6b9df9","slug":"wradlib-clutter-beamblockage","location":"/notebooks/wradlib/wradlib_clutter_beamblockage.ipynb","dependencies":[],"frontmatter":{"title":"wradlib - clutter and beamblockage","content_includes_title":true,"authors":[{"nameParsed":{"literal":"Alfonso Ladino","given":"Alfonso","family":"Ladino"},"name":"Alfonso Ladino","orcid":"0000-0001-8081-7827","github":"aladinor","id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Anna del Moral Méndez","given":"Anna","non_dropping_particle":"del","family":"Moral Méndez"},"name":"Anna del Moral Méndez","orcid":"0000-0002-5015-840X","id":"contributors-myst-generated-uid-1"},{"nameParsed":{"literal":"Brenda Javornik","given":"Brenda","family":"Javornik"},"name":"Brenda Javornik","orcid":"0009-0004-9266-9293","github":"leavesntwigs","id":"contributors-myst-generated-uid-2"},{"nameParsed":{"literal":"Daniel Michelson","given":"Daniel","family":"Michelson"},"name":"Daniel Michelson","orcid":"0000-0003-3222-9881","github":"DanielMichelson","id":"contributors-myst-generated-uid-3"},{"nameParsed":{"literal":"Daniel Wolfensberger","given":"Daniel","family":"Wolfensberger"},"name":"Daniel Wolfensberger","orcid":"0009-0006-1419-0556","github":"wolfidan","id":"contributors-myst-generated-uid-4"},{"nameParsed":{"literal":"Gionata Ghiggi","given":"Gionata","family":"Ghiggi"},"name":"Gionata Ghiggi","orcid":"0000-0002-0818-0865","github":"ghiggi","id":"contributors-myst-generated-uid-5"},{"nameParsed":{"literal":"Jen DeHart","given":"Jen","family":"DeHart"},"name":"Jen DeHart","orcid":"0000-0001-8536-4927","github":"jcdehart","id":"contributors-myst-generated-uid-6"},{"nameParsed":{"literal":"Jordi Figueras i Ventura","given":"Jordi Figueras","non_dropping_particle":"i","family":"Ventura"},"name":"Jordi Figueras i Ventura","orcid":"0000-0002-4949-422X","github":"jfigui","id":"contributors-myst-generated-uid-7"},{"nameParsed":{"literal":"Julian Giles","given":"Julian","family":"Giles"},"name":"Julian Giles","orcid":"0000-0001-8134-008X","github":"JulianGiles","id":"contributors-myst-generated-uid-8"},{"nameParsed":{"literal":"Kai Mühlbauer","given":"Kai","family":"Mühlbauer"},"name":"Kai Mühlbauer","orcid":"0000-0001-6599-1034","github":"kmuehlbauer","id":"contributors-myst-generated-uid-9"},{"nameParsed":{"literal":"Maxwell Grover","given":"Maxwell","family":"Grover"},"name":"Maxwell Grover","orcid":"0000-0002-0370-8974","github":"mgrover1","id":"contributors-myst-generated-uid-10"},{"nameParsed":{"literal":"Mike Dixon","given":"Mike","family":"Dixon"},"name":"Mike Dixon","orcid":"0000-0002-9597-9113","github":"mike-dixon","id":"contributors-myst-generated-uid-11"},{"nameParsed":{"literal":"Robert Jackson","given":"Robert","family":"Jackson"},"name":"Robert Jackson","orcid":"0000-0003-2518-1234","github":"rcjackson","id":"contributors-myst-generated-uid-12"},{"nameParsed":{"literal":"Scott Collis","given":"Scott","family":"Collis"},"name":"Scott Collis","orcid":"0000-0002-2303-687X","github":"scollis","id":"contributors-myst-generated-uid-13"},{"nameParsed":{"literal":"Ting-Yu Cha","given":"Ting-Yu","family":"Cha"},"name":"Ting-Yu Cha","orcid":"0000-0002-6292-8483","github":"tingyucha","id":"contributors-myst-generated-uid-14"}],"open_access":true,"license":{"content":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true},"code":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/openradar/erad2024","copyright":"2024","abbreviations":{"ARM":"Atmospheric Radiation Measurement","NCAR":"National Center for Atmospheric Research"},"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"thumbnail":"/ams2025/build/wradlib_logo.svg-6b654782570274e4bfa5a582d733c6e8.png","exports":[{"format":"ipynb","filename":"wradlib_clutter_beamblockage.ipynb","url":"/ams2025/build/wradlib_clutter_beam-894a91971ad3186e8d2452d44d4c9f2f.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/ams2025/build/wradlib_logo.svg-6b654782570274e4bfa5a582d733c6e8.png","alt":"wradlib logo png","width":250,"key":"AFzG38xlsm","urlSource":"../images/logos/wradlib_logo.svg.png"}],"key":"ZzqsYlX1aP"}],"key":"VS1GzWQO4s"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"wradlib - clutter and beamblockage","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"SDZthl6syI"}],"identifier":"wradlib-clutter-and-beamblockage","label":"wradlib - clutter and beamblockage","html_id":"wradlib-clutter-and-beamblockage","implicit":true,"key":"qiqFzoLfbt"}],"key":"hXp3LAGMCF"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"s701j3ztcO"}],"key":"hTDxZ9dcsn"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"A1Z80VabwR"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"j1pulKotdi"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Within this notebook, we will cover:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"zOL4T7ljQB"}],"key":"ESC5mEfhl6"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Reading data using xradar","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"vFC4POcSqD"}],"key":"fPAWlvuPLz"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Clutter detection","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"zfV4yN0B4l"}],"key":"OD9NpV5Tfh"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Beam Blockage calculation","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"fB4PB4Kmui"}],"key":"mOPHA0lqyo"}],"key":"nH7FBvjVVL"}],"key":"bY9DsPATrG"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"GZzl3Ws4n0"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"OWFfjjY5Ku"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YdOA07XwGC"}],"key":"lBE3dytKDJ"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xF0r8B2Xya"}],"key":"SFaK7XEmAI"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rixs5n0kzB"}],"key":"fXOe8ezrKf"}],"key":"Og56g8W1P2"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://tutorial.xarray.dev/intro.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Xarray Basics","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Vuzbplgcwo"}],"urlSource":"https://tutorial.xarray.dev/intro.html","key":"ZNoB7Emhl2"}],"key":"pbx5978tkM"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"yZu0mMIiqV"}],"key":"mTr3rCTVZ4"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Basic Dataset/DataArray","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"jv6wqb30FJ"}],"key":"wpZRvIYCL7"}],"key":"kUK2yGWJZx"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib/matplotlib-basics.html","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Matplotlib Basics","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"pHCWVgOWA1"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib/matplotlib-basics.html","key":"eHBW9tWWqI"}],"key":"Bt3vNRCrH6"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"ArCb2STyJx"}],"key":"OmZaUOcslF"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Basic Plotting","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"pdkoCZiznw"}],"key":"kd4PIJFSyG"}],"key":"qfSOeP3s2s"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Intro to Cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"QTDOua4eF7"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","key":"Il3A3xN8F2"}],"key":"XYjNAo6YHY"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"lRrmKGGS6j"}],"key":"IW52Qkmemt"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Projections","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"AfOdi4HHnZ"}],"key":"TQQJZo5sSG"}],"key":"bo6RSVyHFl"}],"key":"D6nBIgaYPu"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"strong","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"DBBgbMhtj3"}],"key":"iFhK0nfS9b"},{"type":"text","value":": 10 minutes","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"PNNVnqcC9S"}],"key":"AYPb5KpNDR"}],"key":"QWtjv9TSOm"}],"key":"RgKcmd2Dvc"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Nm3d94xuUu"}],"key":"ci46ZVVvdX"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gGLKWsAKHl"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"G8P1wfJXeV"}],"key":"lGxhXd3uwd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import numpy as np\nimport wradlib as wrl\nimport matplotlib.pyplot as plt\nimport xarray as xr\nimport cartopy\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport xradar as xd\nimport hvplot\nimport hvplot.xarray","key":"ItzGrJ8seG"},{"type":"output","id":"GMAsvT5X0lvZ6zgCbYQL2","data":[],"key":"LRv9o21fYt"}],"key":"WdFNQUN0BY"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"retrieve data from s3 bucket","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lM7wv3YUuJ"}],"identifier":"retrieve-data-from-s3-bucket","label":"retrieve data from s3 bucket","html_id":"retrieve-data-from-s3-bucket","implicit":true,"key":"rBW4MWR3Xp"}],"key":"IHYPzQCgNv"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import os\nimport urllib.request\nfrom pathlib import Path\n\n# Set the URL for the cloud\nURL = \"https://js2.jetstream-cloud.org:8001/\"\npath = \"pythia/radar/erad2024\"\n!mkdir -p data\nfiles = [\n    \"20240522_MeteoSwiss_ARPA_Lombardia/Data/Xband/DES_VOL_RAW_20240522_1600.nc\",\n    \"wradlib/desio_dem.tif\",\n]\nfor file in files:\n    file_remote = os.path.join(path, file)\n    file_local = os.path.join(\"data\", Path(file).name)\n    if not os.path.exists(file_local):\n        print(f\"downloading, {file_local}\")\n        urllib.request.urlretrieve(f\"{URL}{file_remote}\", file_local)","key":"rdrwnW3NpN"},{"type":"output","id":"iaLVmtApeXQALKdCfpIK6","data":[],"key":"F0aO3Sjwc7"}],"key":"YHBYiiKBhj"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Open CfRadial1 Volume","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eabwNeSZD6"}],"identifier":"open-cfradial1-volume","label":"Open CfRadial1 Volume","html_id":"open-cfradial1-volume","implicit":true,"key":"gFvsEuHOJB"}],"key":"twekUpjl2q"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"reindex = dict(angle_res=1, direction=1, start_angle=0, stop_angle=360)\ndtree = xd.io.open_cfradial1_datatree(\"data/DES_VOL_RAW_20240522_1600.nc\")\ndisplay(dtree.load())","key":"P5eKBThoZn"},{"type":"output","id":"9kkYL4IIICNRMA6aYpUGx","data":[],"key":"YPV2prlJEx"}],"key":"XeM3SEdsjG"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Get first sweep","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tHMRR4dWho"}],"identifier":"get-first-sweep","label":"Get first sweep","html_id":"get-first-sweep","implicit":true,"key":"v6iP40KqAL"}],"key":"VWoIAKeDEw"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"swp = (\n    dtree[\"sweep_0\"]\n    .to_dataset()\n    .wrl.georef.georeference(crs=wrl.georef.get_earth_projection())\n    .set_coords(\"sweep_mode\")\n)\nswp.x.attrs = xd.model.get_longitude_attrs()\nswp.y.attrs = xd.model.get_latitude_attrs()","key":"UKc6x3BhgV"},{"type":"output","id":"CqLs3hrZSf9G4zS-p8JJ8","data":[],"key":"K115tizemm"}],"key":"vdERze8v61"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"display(swp)","key":"uSCE6HfFSe"},{"type":"output","id":"hjaDFmtj-N4_3u7C3mENx","data":[],"key":"rdDUNJQATi"}],"key":"Slf5r6prti"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Get Digital Elevation Map (DEM)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QycYGt91YY"}],"identifier":"get-digital-elevation-map-dem","label":"Get Digital Elevation Map (DEM)","html_id":"get-digital-elevation-map-dem","implicit":true,"key":"pxoBAAQUln"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"If we have access to the NASA EarthData GESDISC, we can use the BearerToken to retrieve SRTM data corresponding to the actual radar domain. Or we can choose the precompiled GeoTiff.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XCOh10YHpT"}],"key":"jJUMzmSIN6"}],"key":"Tms1bsivcd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# extent = [swp.x.min().values, swp.x.max().values, swp.y.min().values, swp.y.max().values]\n# import os\n# os.environ[\"WRADLIB_EARTHDATA_BEARER_TOKEN\"] = \"\"\n# dem = wrl.io.get_srtm(extent)\n# wrl.io.write_raster_dataset(\"desio_dem.tif\", dem)","key":"HvRHJuHjpA"},{"type":"output","id":"h9uPMN1yBYMbnqjJrEWdd","data":[],"key":"t3do0s9zhJ"}],"key":"BzjhyJHENc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"dem = (\n    xr.open_dataset(\"data/desio_dem.tif\", engine=\"rasterio\")\n    .isel(band=0)\n    .rename(band_data=\"DEM\")\n    .reset_coords(\"band\", drop=True)\n)\ndisplay(dem)","key":"zT1niz2doZ"},{"type":"output","id":"gdb-azkgBBarJ5r-YruZu","data":[],"key":"MoxhHB21By"}],"key":"ByNgg4z2aY"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Extract radar parameters","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tPjnwcdKli"}],"identifier":"extract-radar-parameters","label":"Extract radar parameters","html_id":"extract-radar-parameters","implicit":true,"key":"JjB19Ke5DA"}],"key":"xWvoat3ffK"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"radar_parameters = dtree[\"radar_parameters\"]","key":"K8M2kVgFxi"},{"type":"output","id":"KB-EgetyhzOga_xyE90oL","data":[],"key":"hHkuqN8m1v"}],"key":"HGHbd99kEu"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"bw = radar_parameters[\"radar_beam_width_h\"]\nbw","key":"a7TyE8aUAT"},{"type":"output","id":"-TjRehK7LisTNPZNyNv6e","data":[],"key":"e8690SVnoj"}],"key":"k4NEUw6Ocn"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prepare DEM for Polar Processing","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"u9k9Ee5BDj"}],"identifier":"prepare-dem-for-polar-processing","label":"Prepare DEM for Polar Processing","html_id":"prepare-dem-for-polar-processing","implicit":true,"key":"s470kuLaJc"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Here the power of ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ZVDXZZYJ2P"},{"type":"link","url":"https://docs.xarray.dev/en/stable/generated/xarray.apply_ufunc.html","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"xr.apply_ufunc","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"mntNsoZUma"}],"urlSource":"https://docs.xarray.dev/en/stable/generated/xarray.apply_ufunc.html","key":"lKnDcvf8cE"},{"type":"text","value":" is shown, a wrapper to xarray-ify numpy functions.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"HhJfox4VXO"}],"key":"WlF9Ap3ipO"}],"key":"mKyaKn5slZ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def interpolate_dem(obj, dem, **kwargs):\n    dim0 = obj.wrl.util.dim0()\n\n    def wrapper(sx, sy, dx, dy, dem, *args, **kwargs):\n        y, x = np.meshgrid(dy, dx)\n        rastercoords = np.dstack([x, y])\n        polcoords = np.dstack([sx, sy])\n        return wrl.ipol.cart_to_irregular_spline(rastercoords, dem, polcoords, **kwargs)\n\n    out = xr.apply_ufunc(\n        wrapper,\n        obj.x,\n        obj.y,\n        dem.x,\n        dem.y,\n        dem,\n        input_core_dims=[[dim0, \"range\"], [dim0, \"range\"], [\"x\"], [\"y\"], [\"y\", \"x\"]],\n        output_core_dims=[[dim0, \"range\"]],\n        dask=\"parallelized\",\n        vectorize=True,\n        kwargs=kwargs,\n        dask_gufunc_kwargs=dict(allow_rechunk=True),\n    )\n    out.name = \"DEM\"\n    return obj.assign(DEM=out)","key":"RzYXZXuX7J"},{"type":"output","id":"d70ENagz6uxUkWjSkuAia","data":[],"key":"So1dMrpLTL"}],"key":"M0yahjrQHn"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"swp = interpolate_dem(swp, dem.DEM, order=3, prefilter=False)","key":"BbnXoHQcZz"},{"type":"output","id":"PlIjtVv8MOkrkYnLE0DLh","data":[],"key":"HIzEG9ASFz"}],"key":"jOr1SKwj7g"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"swp.DEM.wrl.vis.plot(cmap=\"terrain\", vmin=0)","key":"Vv2nh4ZHfe"},{"type":"output","id":"egMFYOOKJM0p7M8ZqKVf8","data":[],"key":"IYbUma5Mgy"}],"key":"iAnxoGCRlc"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot scan strategy","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gg2ba4mEUe"}],"identifier":"plot-scan-strategy","label":"Plot scan strategy","html_id":"plot-scan-strategy","implicit":true,"key":"EBpIRJC17Y"}],"key":"l7YlrZjraB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"nrays = swp.azimuth.size\nnbins = swp.range.size\nrange_res = 300.0\nranges = np.arange(nbins) * range_res\nelevs = dtree.root.sweep_fixed_angle.values\nsitecoords = (\n    dtree.root.longitude.values.item(),\n    dtree.root.latitude.values.item(),\n    dtree.root.altitude.values.item(),\n)\n\nax = wrl.vis.plot_scan_strategy(\n    ranges,\n    elevs,\n    sitecoords,\n    beamwidth=radar_parameters[\"radar_beam_width_h\"].values,\n    terrain=None,\n)","key":"KX51F3ppgJ"},{"type":"output","id":"EH370oF-_QVUUWmfwsMLB","data":[],"key":"xYZ1Q1MHNX"}],"key":"seQ4VBBrbe"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Use ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uU9lTM90Ur"},{"type":"inlineCode","value":"terrain=swp.DEM.sel(azimuth=0, method=\"nearest\")","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qmiMNdZBLc"},{"type":"text","value":" to get some arbitrary ray.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BjMw0qMAS3"}],"key":"WCE5TIiffg"}],"key":"iAtd4Q90rX"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ax = wrl.vis.plot_scan_strategy(\n    ranges,\n    elevs,\n    sitecoords,\n    beamwidth=radar_parameters[\"radar_beam_width_h\"].values,\n    terrain=swp.DEM.sel(azimuth=0, method=\"nearest\"),\n)","key":"q1k9g951Ca"},{"type":"output","id":"UCHKF6plRosGyPfOfMJOB","data":[],"key":"V9dvosxGvp"}],"key":"zuSsoJjVza"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Calculate clutter map","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"a2xKYkucRe"}],"identifier":"calculate-clutter-map","label":"Calculate clutter map","html_id":"calculate-clutter-map","implicit":true,"key":"fDzsJ5WptF"}],"key":"iiiCIzC1KE"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"clmap = swp.DBZ_TOT.wrl.classify.filter_gabella(\n    wsize=5,\n    thrsnorain=0.0,\n    tr1=21.0,  # 21.,\n    n_p=23.0,  # 23,\n    tr2=1.3,\n    rm_nans=False,\n)\nswp = swp.assign({\"CMAP\": clmap})","key":"jplZA3LOeB"},{"type":"output","id":"yxKBrn5LAJOcReKYQF9eK","data":[],"key":"ybxGKVKQjv"}],"key":"xtoxOUTmZe"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Reflectivities, Clutter and Cluttermap","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VgamGrgM74"}],"identifier":"plot-reflectivities-clutter-and-cluttermap","label":"Plot Reflectivities, Clutter and Cluttermap","html_id":"plot-reflectivities-clutter-and-cluttermap","implicit":true,"key":"Y06yhjNYl6"}],"key":"JAunLLEeSN"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"fig = plt.figure(figsize=(15, 12))\nax1 = fig.add_subplot(221)\nfrom osgeo import osr\n\nwgs84 = osr.SpatialReference()\nwgs84.ImportFromEPSG(4326)\n# swp = swp.sel(range=slice(0, 100000)).set_coords(\"sweep_mode\").wrl.georef.georeference(crs=wgs84)\nswp.DBZ_TOT.plot(x=\"x\", y=\"y\", ax=ax1, vmin=0, vmax=60)\nax1.set_title(\"Reflectivity raw\")\nax2 = fig.add_subplot(222)\nswp.CMAP.plot(x=\"x\", y=\"y\", ax=ax2)\nax2.set_title(\"Cluttermap\")\nax3 = fig.add_subplot(223)\nswp.DBZ_TOT.where(swp.CMAP == 1).plot(x=\"x\", y=\"y\", ax=ax3, vmin=0, vmax=60)\nax3.set_title(\"Clutter\")\nax4 = fig.add_subplot(224)\nswp.DBZ_TOT.where(swp.CMAP < 1).plot(x=\"x\", y=\"y\", ax=ax4, vmin=0, vmax=60)\nax4.set_title(\"Reflectivity clutter removed\")","key":"cfgzA5o2FW"},{"type":"output","id":"PJAkLP0YRpx1xOY921yrF","data":[],"key":"vT8DBmkMGm"}],"key":"UVOIa7RNTE"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Compare with corrected reflectivity from signal processor","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NlfsQ3dI7I"}],"identifier":"compare-with-corrected-reflectivity-from-signal-processor","label":"Compare with corrected reflectivity from signal processor","html_id":"compare-with-corrected-reflectivity-from-signal-processor","implicit":true,"key":"YW1oXcOwhh"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"plus additional simple RHOHV filter","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xYKvMNTdBL"}],"key":"fskYcTETuU"}],"key":"GRbGgZFoFt"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"fig = plt.figure(figsize=(15, 6))\nax1 = fig.add_subplot(121)\nswp.DBZ.plot(x=\"x\", y=\"y\", ax=ax1, vmin=0, vmax=60)\nax1.set_title(\"Reflectivity corr\")\nax2 = fig.add_subplot(122)\nswp.DBZ_TOT.where((swp.CMAP < 1) & (swp.RHOHV >= 0.8)).plot(\n    x=\"x\", y=\"y\", ax=ax2, vmin=0, vmax=60\n)\nax2.set_title(\"Reflectivity clutter removed\")","key":"Bg0mXMKCVd"},{"type":"output","id":"GJZRldrYlfr2xuNoh2-xQ","data":[],"key":"OEhIfuwWn9"}],"key":"Uy3HLekPsr"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"fig = plt.figure(figsize=(8, 5))\nax1 = fig.add_subplot(111)\nswp.CMAP.where(swp.CMAP == 1).plot(x=\"x\", y=\"y\", vmin=0, vmax=1, cmap=\"turbo\")\nax1.set_title(\"Reflectivity corr\")\ndem.DEM.plot(ax=ax1, zorder=-2, cmap=\"terrain\", vmin=0)","key":"CQpmzoc9vr"},{"type":"output","id":"nIgUS3Bw_NyzjcnAax_6d","data":[],"key":"HOOOAe9sjq"}],"key":"IW9WGR4ifd"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Use hvplot for zooming and panning","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DsNMzazd8z"}],"identifier":"use-hvplot-for-zooming-and-panning","label":"Use hvplot for zooming and panning","html_id":"use-hvplot-for-zooming-and-panning","implicit":true,"key":"V0Oe4nXCJQ"}],"key":"R4VZbl0gnk"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We need to rechunk the coordinates as hvplot needs chunked variables and coords.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EUlQgqwHw8"}],"key":"wBmq2tZ18x"}],"key":"dg0fsGz9Pm"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"cl = (\n    swp.CMAP.where(swp.CMAP == 1)\n    .chunk(chunks={})\n    .hvplot.quadmesh(\n        x=\"x\", y=\"y\", cmap=\"turbo\", width=600, height=500, clim=(0, 1), rasterize=True\n    )\n)\ndm = dem.DEM.chunk(chunks={}).hvplot(\n    x=\"x\", y=\"y\", cmap=\"terrain\", width=600, height=500, rasterize=True\n)\ndm * cl","key":"hOxTEwhjQE"},{"type":"output","id":"TY9ilF0M3RWqUPsM4sVPz","data":[],"key":"u1YplUwU8a"}],"key":"sXPxmDt66k"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"BeamBlockage Calculation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"T9NsCvSBot"}],"identifier":"beamblockage-calculation","label":"BeamBlockage Calculation","html_id":"beamblockage-calculation","implicit":true,"key":"CMEFAn2Bm6"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Can you xarray-ify the following, too?","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ZKsZhJzKd4"}],"key":"uY31K9Mojf"}],"key":"UeMbVHUhlH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"beamradius = wrl.util.half_power_radius(swp.range, bw)\nPBB = wrl.qual.beam_block_frac(swp.DEM.values, swp.z.values, beamradius)\nPBB = np.ma.masked_invalid(PBB)\nCBB = wrl.qual.cum_beam_block_frac(PBB)","key":"DNDggqEOjQ"},{"type":"output","id":"H0ELljQqsM45v-RLHulQP","data":[],"key":"RYScyUHQid"}],"key":"IUztHKFfzs"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"swp = swp.assign(\n    CBB=([\"azimuth\", \"range\"], CBB),\n    PBB=([\"azimuth\", \"range\"], PBB),\n)","key":"bmn33xGcDt"},{"type":"output","id":"HPiQyMxl5mqQMi_WeP31O","data":[],"key":"nhnjZGslUE"}],"key":"JWKS3srW2k"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# just a little helper function to style x and y axes of our maps\ndef annotate_map(ax, cm=None, title=\"\"):\n    # ticks = (ax.get_xticks() / 1000).astype(int)\n    # ax.set_xticklabels(ticks)\n    # ticks = (ax.get_yticks() / 1000).astype(int)\n    # ax.set_yticklabels(ticks)\n    # ax.set_xlabel(\"Kilometers\")\n    # ax.set_ylabel(\"Kilometers\")\n    if not cm is None:\n        plt.colorbar(cm, ax=ax)\n    if not title == \"\":\n        ax.set_title(title)\n    ax.grid()","key":"bHfwYVMQKS"},{"type":"output","id":"UxMDoFSEwqf2YvngDwp6m","data":[],"key":"IJRfJkgY61"}],"key":"CUwXLTYb29"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import matplotlib as mpl\n\nsitecoords = (swp.longitude.values, swp.latitude.values, swp.altitude.values)\nr = swp.range.values\naz = swp.azimuth.values\n\nalt = swp.z.values\nfig = plt.figure(figsize=(15, 12))\n\n# create subplots\nax1 = plt.subplot2grid((2, 2), (0, 0))\nax2 = plt.subplot2grid((2, 2), (0, 1))\nax3 = plt.subplot2grid((2, 2), (1, 0), colspan=2, rowspan=1)\n\n# azimuth angle\nangle = 0\n\n# Plot terrain (on ax1)\ndem_pm = swp.DEM.wrl.vis.plot(ax=ax1, cmap=mpl.cm.terrain, vmin=0.0, add_colorbar=False)\nswp.sel(azimuth=0, method=\"nearest\").plot.scatter(\n    x=\"x\", y=\"y\", marker=\".\", color=\"r\", alpha=0.2, ax=ax1\n)\nax1.plot(swp.longitude.values, swp.latitude.values, \"ro\")\nannotate_map(\n    ax1,\n    dem_pm,\n    \"Terrain within {0} km range\".format(np.max(swp.range.values / 1000.0) + 0.1),\n)\n\n# Plot CBB (on ax2)\ncbb = swp.CBB.wrl.vis.plot(ax=ax2, cmap=mpl.cm.PuRd, vmin=0, vmax=1, add_colorbar=False)\nannotate_map(ax2, cbb, \"Beam-Blockage Fraction\")\n\n# Plot single ray terrain profile on ax3\n(bc,) = ax3.plot(\n    swp.range / 1000.0, swp.z[angle, :], \"-b\", linewidth=3, label=\"Beam Center\"\n)\n(b3db,) = ax3.plot(\n    swp.range.values / 1000.0,\n    (swp.z[angle, :] + beamradius),\n    \":b\",\n    linewidth=1.5,\n    label=\"3 dB Beam width\",\n)\nax3.plot(swp.range / 1000.0, (swp.z[angle, :] - beamradius), \":b\")\nax3.fill_between(swp.range / 1000.0, 0.0, swp.DEM[angle, :], color=\"0.75\")\nax3.set_xlim(0.0, np.max(swp.range / 1000.0) + 0.1)\nax3.set_ylim(0.0, 3000)\nax3.set_xlabel(\"Range (km)\")\nax3.set_ylabel(\"Altitude (m)\")\nax3.grid()\n\naxb = ax3.twinx()\n(bbf,) = axb.plot(swp.range / 1000.0, swp.CBB[angle, :], \"-k\", label=\"BBF\")\naxb.set_ylabel(\"Beam-blockage fraction\")\naxb.set_ylim(0.0, 1.0)\naxb.set_xlim(0.0, np.max(swp.range / 1000.0) + 0.1)\n\n\nlegend = ax3.legend(\n    (bc, b3db, bbf),\n    (\"Beam Center\", \"3 dB Beam width\", \"BBF\"),\n    loc=\"upper left\",\n    fontsize=10,\n)","key":"IoNrmmQiGZ"},{"type":"output","id":"-_pmGcppMl1AVY9sHyKW2","data":[],"key":"nFmhpwRn18"}],"key":"iPtAfzb0sx"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Some EyeCandy","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QuvryIT3FF"}],"identifier":"some-eyecandy","label":"Some EyeCandy","html_id":"some-eyecandy","implicit":true,"key":"ujuCxEqFGG"}],"key":"Rr6wHdOHJ1"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def height_formatter(x, pos):\n    x = (x - 6370000) / 1000\n    fmt_str = \"{:g}\".format(x)\n    return fmt_str\n\n\ndef range_formatter(x, pos):\n    x = x / 1000.0\n    fmt_str = \"{:g}\".format(x)\n    return fmt_str","key":"EZU6JfSZE0"},{"type":"output","id":"JqlnA6GV3fuB6SqDWi-rS","data":[],"key":"G55917bl9w"}],"key":"Gx67KehqUp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"fig = plt.figure(figsize=(10, 6))\n\ncgax, caax, paax = wrl.vis.create_cg(fig=fig, rot=0, scale=1)\n\n# azimuth angle\nangle = 0\n\n# fix grid_helper\ner = 6370000\ngh = cgax.get_grid_helper()\ngh.grid_finder.grid_locator2._nbins = 80\ngh.grid_finder.grid_locator2._steps = [1, 2, 4, 5, 10]\n\n# calculate beam_height and arc_distance for ke=1\n# means line of sight\nbhe = wrl.georef.bin_altitude(r, 0, sitecoords[2], re=er, ke=1.0)\nade = wrl.georef.bin_distance(r, 0, sitecoords[2], re=er, ke=1.0)\nnn0 = np.zeros_like(r)\n# for nice plotting we assume earth_radius = 6370000 m\necp = nn0 + er\n# theta (arc_distance sector angle)\nthetap = -np.degrees(ade / er) + 90.0\n\n# zero degree elevation with standard refraction\nbh0 = wrl.georef.bin_altitude(r, 0, sitecoords[2], re=er)\n\n# plot (ecp is earth surface normal null)\n(bes,) = paax.plot(thetap, ecp, \"-k\", linewidth=3, label=\"Earth Surface NN\")\n(bc,) = paax.plot(thetap, ecp + alt[angle, :], \"-b\", linewidth=3, label=\"Beam Center\")\n(bc0r,) = paax.plot(thetap, ecp + bh0, \"-g\", label=\"0 deg Refraction\")\n(bc0n,) = paax.plot(thetap, ecp + bhe, \"-r\", label=\"0 deg line of sight\")\n(b3db,) = paax.plot(\n    thetap, ecp + alt[angle, :] + beamradius, \":b\", label=\"+3 dB Beam width\"\n)\npaax.plot(thetap, ecp + alt[angle, :] - beamradius, \":b\", label=\"-3 dB Beam width\")\n\n# orography\npaax.fill_between(thetap, ecp, ecp + swp.DEM[angle, :], color=\"0.75\")\n\n# shape axes\ncgax.set_xlim(0, np.max(ade))\ncgax.set_ylim([ecp.min() - 1000, ecp.max() + 2500])\ncaax.grid(True, axis=\"x\")\ncgax.grid(True, axis=\"y\")\ncgax.axis[\"top\"].toggle(all=False)\ncaax.yaxis.set_major_locator(\n    mpl.ticker.MaxNLocator(steps=[1, 2, 4, 5, 10], nbins=20, prune=\"both\")\n)\ncaax.xaxis.set_major_locator(mpl.ticker.MaxNLocator())\ncaax.yaxis.set_major_formatter(mpl.ticker.FuncFormatter(height_formatter))\ncaax.xaxis.set_major_formatter(mpl.ticker.FuncFormatter(range_formatter))\n\ncaax.set_xlabel(\"Range (km)\")\ncaax.set_ylabel(\"Altitude (km)\")\n\nlegend = paax.legend(\n    (bes, bc0n, bc0r, bc, b3db),\n    (\n        \"Earth Surface NN\",\n        \"0 deg line of sight\",\n        \"0 deg std refraction\",\n        \"Beam Center\",\n        \"3 dB Beam width\",\n    ),\n    loc=\"lower left\",\n    fontsize=10,\n)","key":"xugWra86VR"},{"type":"output","id":"vLB1Dfx0-ip9-OTm3yT97","data":[],"key":"cf6cqT5HmL"}],"key":"U7AoBioT7y"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vWLHLn199j"}],"key":"Uyc1G84w03"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DWnodg4kys"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"DcPpPwqbHN"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"We’ve just learned how to use ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"EURyvNYiU0"},{"type":"inlineMath","value":"\\omega radlib","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi><mi>r</mi><mi>a</mi><mi>d</mi><mi>l</mi><mi>i</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">\\omega radlib</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">ib</span></span></span></span>","key":"OCEvSSbouA"},{"type":"text","value":"’s Gabella clutter detection for single sweeps. We’ve looked into digital elevation maps and beam blockage calculations.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"e88YbtfVJl"}],"key":"AR8ivVYg42"}],"key":"Gw6Ml8HGEQ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eoKfdwkeBg"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"MqrtY6rjoY"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"link","url":"https://docs.xarray.dev","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"xarray","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"WCyfMLefoo"}],"urlSource":"https://docs.xarray.dev","key":"alw32PEwSz"}],"key":"DS0PpSwV7h"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"link","url":"https://docs.dask.org/","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"dask","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"uA6wzVBegu"}],"urlSource":"https://docs.dask.org/","key":"fhQnVU7o1g"}],"key":"cPTv4agP5N"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://gdal.org","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"GDAL","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"YtQdkFkWLl"}],"urlSource":"https://gdal.org","key":"XP0VZQqQx8"}],"key":"p47HC4r73c"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://docs.openradarscience.org/projects/xradar/en/stable/importers.html","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"xradar backends","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"fkMZroeAu0"}],"urlSource":"https://docs.openradarscience.org/projects/xradar/en/stable/importers.html","key":"uHFqhdaXeP"}],"key":"sclnT8hjQZ"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://ncar.github.io/CfRadial/","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"CfRadial1","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"xftx0dQQSz"}],"urlSource":"https://ncar.github.io/CfRadial/","key":"tqUbPpB2eq"}],"key":"k1dsPrCCe2"}],"key":"KDRTZXBPp3"}],"key":"wz005Dfdux"}],"key":"MRNAaT1AMB"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Py-ART Basics with Xradar","url":"/pyart-basics","group":"Py-ART and wradlib"},"next":{"title":"Introduction to GPM-API","url":"/gpm-api-intro","group":"Py-ART and wradlib"}}},"domain":"http://localhost:3000"}