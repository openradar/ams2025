{"version":2,"kind":"Notebook","sha256":"d21c2ce915ceaa1f311c1eae327095f631c5ba205dc67537c9e158286a6b9df9","slug":"wradlib-clutter-beamblockage","location":"/notebooks/wradlib/wradlib_clutter_beamblockage.ipynb","dependencies":[],"frontmatter":{"title":"wradlib - clutter and beamblockage","content_includes_title":true,"authors":[{"nameParsed":{"literal":"Alfonso Ladino","given":"Alfonso","family":"Ladino"},"name":"Alfonso Ladino","orcid":"0000-0001-8081-7827","github":"aladinor","id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Anna del Moral Méndez","given":"Anna","non_dropping_particle":"del","family":"Moral Méndez"},"name":"Anna del Moral Méndez","orcid":"0000-0002-5015-840X","id":"contributors-myst-generated-uid-1"},{"nameParsed":{"literal":"Brenda Javornik","given":"Brenda","family":"Javornik"},"name":"Brenda Javornik","orcid":"0009-0004-9266-9293","github":"leavesntwigs","id":"contributors-myst-generated-uid-2"},{"nameParsed":{"literal":"Daniel Michelson","given":"Daniel","family":"Michelson"},"name":"Daniel Michelson","orcid":"0000-0003-3222-9881","github":"DanielMichelson","id":"contributors-myst-generated-uid-3"},{"nameParsed":{"literal":"Daniel Wolfensberger","given":"Daniel","family":"Wolfensberger"},"name":"Daniel Wolfensberger","orcid":"0009-0006-1419-0556","github":"wolfidan","id":"contributors-myst-generated-uid-4"},{"nameParsed":{"literal":"Gionata Ghiggi","given":"Gionata","family":"Ghiggi"},"name":"Gionata Ghiggi","orcid":"0000-0002-0818-0865","github":"ghiggi","id":"contributors-myst-generated-uid-5"},{"nameParsed":{"literal":"Jen DeHart","given":"Jen","family":"DeHart"},"name":"Jen DeHart","orcid":"0000-0001-8536-4927","github":"jcdehart","id":"contributors-myst-generated-uid-6"},{"nameParsed":{"literal":"Jordi Figueras i Ventura","given":"Jordi Figueras","non_dropping_particle":"i","family":"Ventura"},"name":"Jordi Figueras i Ventura","orcid":"0000-0002-4949-422X","github":"jfigui","id":"contributors-myst-generated-uid-7"},{"nameParsed":{"literal":"Julian Giles","given":"Julian","family":"Giles"},"name":"Julian Giles","orcid":"0000-0001-8134-008X","github":"JulianGiles","id":"contributors-myst-generated-uid-8"},{"nameParsed":{"literal":"Kai Mühlbauer","given":"Kai","family":"Mühlbauer"},"name":"Kai Mühlbauer","orcid":"0000-0001-6599-1034","github":"kmuehlbauer","id":"contributors-myst-generated-uid-9"},{"nameParsed":{"literal":"Maxwell Grover","given":"Maxwell","family":"Grover"},"name":"Maxwell Grover","orcid":"0000-0002-0370-8974","github":"mgrover1","id":"contributors-myst-generated-uid-10"},{"nameParsed":{"literal":"Mike Dixon","given":"Mike","family":"Dixon"},"name":"Mike Dixon","orcid":"0000-0002-9597-9113","github":"mike-dixon","id":"contributors-myst-generated-uid-11"},{"nameParsed":{"literal":"Robert Jackson","given":"Robert","family":"Jackson"},"name":"Robert Jackson","orcid":"0000-0003-2518-1234","github":"rcjackson","id":"contributors-myst-generated-uid-12"},{"nameParsed":{"literal":"Scott Collis","given":"Scott","family":"Collis"},"name":"Scott Collis","orcid":"0000-0002-2303-687X","github":"scollis","id":"contributors-myst-generated-uid-13"},{"nameParsed":{"literal":"Ting-Yu Cha","given":"Ting-Yu","family":"Cha"},"name":"Ting-Yu Cha","orcid":"0000-0002-6292-8483","github":"tingyucha","id":"contributors-myst-generated-uid-14"}],"open_access":true,"license":{"content":{"id":"Apache-2.0","url":"https://opensource.org/licenses/Apache-2.0","name":"Apache License 2.0","free":true,"osi":true},"code":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true}},"github":"https://github.com/openradar/erad2024","copyright":"2024","abbreviations":{"ARM":"Atmospheric Radiation Measurement","NCAR":"National Center for Atmospheric Research"},"settings":{"output_matplotlib_strings":"remove"},"numbering":{"title":{"offset":2}},"thumbnail":"/ams2025/build/wradlib_logo.svg-ae6fb1f6bf4b82a8003d5cea7994e112.png","exports":[{"format":"ipynb","filename":"wradlib_clutter_beamblockage.ipynb","url":"/ams2025/build/wradlib_clutter_beam-d7efe1ee689c6a704901040326311e72.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"image","url":"/ams2025/build/wradlib_logo.svg-ae6fb1f6bf4b82a8003d5cea7994e112.png","alt":"wradlib logo png","width":250,"key":"HwIIfqh8xp","urlSource":"../images/logos/wradlib_logo.svg.png"}],"key":"o2WoLovb4L"}],"key":"X6K257Z3nn"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"wradlib - clutter and beamblockage","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"x7RlZgASBU"}],"identifier":"wradlib-clutter-and-beamblockage","label":"wradlib - clutter and beamblockage","html_id":"wradlib-clutter-and-beamblockage","implicit":true,"key":"v9v0CdhzLX"}],"key":"N3mTcg5rB6"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZRtEgzcPBJ"}],"key":"ZCl3viK9KQ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Overview","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZeKlYw8Cub"}],"identifier":"overview","label":"Overview","html_id":"overview","implicit":true,"key":"c91zcWmSQl"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Within this notebook, we will cover:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"B1fac4Omiy"}],"key":"J9lRZsW2ED"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Reading data using xradar","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Bw3zswRG2l"}],"key":"BDFhs8RPFj"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Clutter detection","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"u1K4WXiSJw"}],"key":"xYUqhwxC7B"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Beam Blockage calculation","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"ma4HqTsnXA"}],"key":"VFqNk6urhm"}],"key":"KdgimLjT7N"}],"key":"FgQFof2tmM"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prerequisites","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WsduyTWKJx"}],"identifier":"prerequisites","label":"Prerequisites","html_id":"prerequisites","implicit":true,"key":"E5z2k0Gj96"},{"type":"table","position":{"start":{"line":3,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableRow","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Concepts","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"M62nlR9DHW"}],"key":"ReneG15C8l"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Importance","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"X5Bjbgm9jd"}],"key":"iv9bfxqrpa"},{"type":"tableCell","header":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Notes","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"GUxcyym9vZ"}],"key":"gkQmm9RWZz"}],"key":"rGZ3pjyir6"},{"type":"tableRow","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://tutorial.xarray.dev/intro.html","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Xarray Basics","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Y0yHVfEgds"}],"urlSource":"https://tutorial.xarray.dev/intro.html","key":"eAZmqnAZcK"}],"key":"cOLezWvULQ"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"vDclvfIBpH"}],"key":"LuJdhXXFEL"},{"type":"tableCell","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Basic Dataset/DataArray","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"HDgQrg8V1n"}],"key":"f8qCAdn7BF"}],"key":"jyK7OmkEC2"},{"type":"tableRow","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/matplotlib/matplotlib-basics.html","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Matplotlib Basics","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"l6LEMAa2Al"}],"urlSource":"https://foundations.projectpythia.org/core/matplotlib/matplotlib-basics.html","key":"OuzAwReEnY"}],"key":"QlrWaDFxyW"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"EGKqHauVk2"}],"key":"NSX8nTUoRX"},{"type":"tableCell","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Basic Plotting","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"CjQovfYwAW"}],"key":"kqvOxSUa7Q"}],"key":"jeviosEKVy"},{"type":"tableRow","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Intro to Cartopy","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"OycbkW9LcR"}],"urlSource":"https://foundations.projectpythia.org/core/cartopy/cartopy.html","key":"QFtueoZEsS"}],"key":"Xpk4ae7EPI"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Helpful","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"s4Vr89oPUR"}],"key":"NgI5cfdovf"},{"type":"tableCell","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Projections","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"Lar8zgPoJT"}],"key":"km5tkNkTTm"}],"key":"vFQjMJNviv"}],"key":"M61NNn447N"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"strong","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Time to learn","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"njikEyqwcn"}],"key":"WnI1aQMKmg"},{"type":"text","value":": 10 minutes","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"igd1dVfQij"}],"key":"rBqBXqyMIh"}],"key":"uhO5a64pjX"}],"key":"jLuyhaPTEF"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iqFfoBvR91"}],"key":"VaKO3TF5RJ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Imports","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LVNPGPaZZW"}],"identifier":"imports","label":"Imports","html_id":"imports","implicit":true,"key":"NV9utLcYuy"}],"key":"m0AkGW8WDp"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import numpy as np\nimport wradlib as wrl\nimport matplotlib.pyplot as plt\nimport xarray as xr\nimport cartopy\nimport cartopy.crs as ccrs\nimport cartopy.feature as cfeature\nimport xradar as xd\nimport hvplot\nimport hvplot.xarray","key":"lUzAE0nyoz"},{"type":"output","id":"NllATGpg0wLYUnzsSq9um","data":[],"key":"ptmH2PLeL4"}],"key":"LhQFX6KYnS"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"retrieve data from s3 bucket","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"tRuFzF9Odz"}],"identifier":"retrieve-data-from-s3-bucket","label":"retrieve data from s3 bucket","html_id":"retrieve-data-from-s3-bucket","implicit":true,"key":"ESoVAMgXpw"}],"key":"sV7kpHOFwc"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import os\nimport urllib.request\nfrom pathlib import Path\n\n# Set the URL for the cloud\nURL = \"https://js2.jetstream-cloud.org:8001/\"\npath = \"pythia/radar/erad2024\"\n!mkdir -p data\nfiles = [\n    \"20240522_MeteoSwiss_ARPA_Lombardia/Data/Xband/DES_VOL_RAW_20240522_1600.nc\",\n    \"wradlib/desio_dem.tif\",\n]\nfor file in files:\n    file_remote = os.path.join(path, file)\n    file_local = os.path.join(\"data\", Path(file).name)\n    if not os.path.exists(file_local):\n        print(f\"downloading, {file_local}\")\n        urllib.request.urlretrieve(f\"{URL}{file_remote}\", file_local)","key":"L2dwV0Aga9"},{"type":"output","id":"2hC7VGi6Nxsi7eAO5ZjKD","data":[],"key":"gsM9zeTpta"}],"key":"KhTXJXGRnM"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Open CfRadial1 Volume","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XvdUsSuE3o"}],"identifier":"open-cfradial1-volume","label":"Open CfRadial1 Volume","html_id":"open-cfradial1-volume","implicit":true,"key":"eSDASyNto9"}],"key":"ODv3F0kyrv"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"reindex = dict(angle_res=1, direction=1, start_angle=0, stop_angle=360)\ndtree = xd.io.open_cfradial1_datatree(\"data/DES_VOL_RAW_20240522_1600.nc\")\ndisplay(dtree.load())","key":"Ru67250jkP"},{"type":"output","id":"cSSNDO5X2HScP69vm4ur9","data":[],"key":"WRVKq6VNIC"}],"key":"zGMSc3WQlX"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Get first sweep","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"H4EHLd64sJ"}],"identifier":"get-first-sweep","label":"Get first sweep","html_id":"get-first-sweep","implicit":true,"key":"kcFwnvvBH4"}],"key":"RGnXyWcm6G"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"swp = (\n    dtree[\"sweep_0\"]\n    .to_dataset()\n    .wrl.georef.georeference(crs=wrl.georef.get_earth_projection())\n    .set_coords(\"sweep_mode\")\n)\nswp.x.attrs = xd.model.get_longitude_attrs()\nswp.y.attrs = xd.model.get_latitude_attrs()","key":"a2LzwJKzdT"},{"type":"output","id":"kPB_rf5s-AvoIMDEExCXh","data":[],"key":"IHDeGvVfAC"}],"key":"ohvQ17sP0r"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"display(swp)","key":"pqpsw5faXG"},{"type":"output","id":"LlSIrtRwYPvQl6KW15KO_","data":[],"key":"fSxU6tlZJR"}],"key":"Ml9CgjnYX0"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Get Digital Elevation Map (DEM)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OmuJ3VpoRD"}],"identifier":"get-digital-elevation-map-dem","label":"Get Digital Elevation Map (DEM)","html_id":"get-digital-elevation-map-dem","implicit":true,"key":"pHsZKh3ncE"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"If we have access to the NASA EarthData GESDISC, we can use the BearerToken to retrieve SRTM data corresponding to the actual radar domain. Or we can choose the precompiled GeoTiff.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"EDp4mjSAfj"}],"key":"yJu0snA6yh"}],"key":"UZw5z9P46g"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# extent = [swp.x.min().values, swp.x.max().values, swp.y.min().values, swp.y.max().values]\n# import os\n# os.environ[\"WRADLIB_EARTHDATA_BEARER_TOKEN\"] = \"\"\n# dem = wrl.io.get_srtm(extent)\n# wrl.io.write_raster_dataset(\"desio_dem.tif\", dem)","key":"vvzZOXvNjA"},{"type":"output","id":"uG4X7aEmZ_aazKW-iYKzi","data":[],"key":"Zda1LZB1Ro"}],"key":"QDOJWReHbA"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"dem = (\n    xr.open_dataset(\"data/desio_dem.tif\", engine=\"rasterio\")\n    .isel(band=0)\n    .rename(band_data=\"DEM\")\n    .reset_coords(\"band\", drop=True)\n)\ndisplay(dem)","key":"K6kz3pXYXN"},{"type":"output","id":"rw1ckJEnzGKxGryevIdim","data":[],"key":"youqu9DHJB"}],"key":"pkQtFhW6UX"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Extract radar parameters","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QOQcI3t7uU"}],"identifier":"extract-radar-parameters","label":"Extract radar parameters","html_id":"extract-radar-parameters","implicit":true,"key":"E67D6KIDVb"}],"key":"kyLgu7aBdM"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"radar_parameters = dtree[\"radar_parameters\"]","key":"CjsL4XAoCX"},{"type":"output","id":"JKzFcorQ4xL73ELimF4wY","data":[],"key":"wDHVKNNjHe"}],"key":"hDTALsLBgG"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"bw = radar_parameters[\"radar_beam_width_h\"]\nbw","key":"F4zoixzxHv"},{"type":"output","id":"bhjpEWE8K4MD8AABz7d2l","data":[],"key":"VUACq0BrPH"}],"key":"CTrNQp4Ysx"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Prepare DEM for Polar Processing","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zN4aBTKzZG"}],"identifier":"prepare-dem-for-polar-processing","label":"Prepare DEM for Polar Processing","html_id":"prepare-dem-for-polar-processing","implicit":true,"key":"suVXwVnEk2"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Here the power of ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"tJQ3swTo1c"},{"type":"link","url":"https://docs.xarray.dev/en/stable/generated/xarray.apply_ufunc.html","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"xr.apply_ufunc","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"WBmYhoM2jS"}],"urlSource":"https://docs.xarray.dev/en/stable/generated/xarray.apply_ufunc.html","key":"llkH1fEphQ"},{"type":"text","value":" is shown, a wrapper to xarray-ify numpy functions.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"sfPPq3cpKp"}],"key":"mm8WBFDSL0"}],"key":"F4O869fHbJ"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def interpolate_dem(obj, dem, **kwargs):\n    dim0 = obj.wrl.util.dim0()\n\n    def wrapper(sx, sy, dx, dy, dem, *args, **kwargs):\n        y, x = np.meshgrid(dy, dx)\n        rastercoords = np.dstack([x, y])\n        polcoords = np.dstack([sx, sy])\n        return wrl.ipol.cart_to_irregular_spline(rastercoords, dem, polcoords, **kwargs)\n\n    out = xr.apply_ufunc(\n        wrapper,\n        obj.x,\n        obj.y,\n        dem.x,\n        dem.y,\n        dem,\n        input_core_dims=[[dim0, \"range\"], [dim0, \"range\"], [\"x\"], [\"y\"], [\"y\", \"x\"]],\n        output_core_dims=[[dim0, \"range\"]],\n        dask=\"parallelized\",\n        vectorize=True,\n        kwargs=kwargs,\n        dask_gufunc_kwargs=dict(allow_rechunk=True),\n    )\n    out.name = \"DEM\"\n    return obj.assign(DEM=out)","key":"Rkm0RWaEPX"},{"type":"output","id":"Yq3qluDcIEcXtqcgB1mPE","data":[],"key":"PHHr8coLX8"}],"key":"L8ztzNq78T"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"swp = interpolate_dem(swp, dem.DEM, order=3, prefilter=False)","key":"uvC3bxN41J"},{"type":"output","id":"7AdrGZuK6lWX1pusv7t_h","data":[],"key":"riXw8bV9j3"}],"key":"DtWODo6KdB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"swp.DEM.wrl.vis.plot(cmap=\"terrain\", vmin=0)","key":"QD0Dh3v2Mg"},{"type":"output","id":"6P2BI46QnFwtpU6nbxtQZ","data":[],"key":"I94ESZQN2s"}],"key":"IYtHw2F8MX"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot scan strategy","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ifBhN55Psq"}],"identifier":"plot-scan-strategy","label":"Plot scan strategy","html_id":"plot-scan-strategy","implicit":true,"key":"c9vSatCp98"}],"key":"T0aTs2A9mF"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"nrays = swp.azimuth.size\nnbins = swp.range.size\nrange_res = 300.0\nranges = np.arange(nbins) * range_res\nelevs = dtree.root.sweep_fixed_angle.values\nsitecoords = (\n    dtree.root.longitude.values.item(),\n    dtree.root.latitude.values.item(),\n    dtree.root.altitude.values.item(),\n)\n\nax = wrl.vis.plot_scan_strategy(\n    ranges,\n    elevs,\n    sitecoords,\n    beamwidth=radar_parameters[\"radar_beam_width_h\"].values,\n    terrain=None,\n)","key":"Ywjouef76w"},{"type":"output","id":"IJcs0A8vpbwxKYQ_pCDuB","data":[],"key":"SBg1NvkURv"}],"key":"KEgimn5u1R"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Use ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ULtwEyDn0d"},{"type":"inlineCode","value":"terrain=swp.DEM.sel(azimuth=0, method=\"nearest\")","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"upIj6H6riD"},{"type":"text","value":" to get some arbitrary ray.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gm2dUoi1jq"}],"key":"HzLmBPygDK"}],"key":"XN8k1iKhhS"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"ax = wrl.vis.plot_scan_strategy(\n    ranges,\n    elevs,\n    sitecoords,\n    beamwidth=radar_parameters[\"radar_beam_width_h\"].values,\n    terrain=swp.DEM.sel(azimuth=0, method=\"nearest\"),\n)","key":"jVKKa4Vs6u"},{"type":"output","id":"H1ao_IgFB2Y0kfiZ1szxW","data":[],"key":"po5uTp9oSE"}],"key":"d3kJrcj3Mk"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Calculate clutter map","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QBcCJK3fgv"}],"identifier":"calculate-clutter-map","label":"Calculate clutter map","html_id":"calculate-clutter-map","implicit":true,"key":"G19c1qvLSj"}],"key":"mUcEz0lIUe"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"clmap = swp.DBZ_TOT.wrl.classify.filter_gabella(\n    wsize=5,\n    thrsnorain=0.0,\n    tr1=21.0,  # 21.,\n    n_p=23.0,  # 23,\n    tr2=1.3,\n    rm_nans=False,\n)\nswp = swp.assign({\"CMAP\": clmap})","key":"uKCxowBHFn"},{"type":"output","id":"PSs9B-u0AlFo4DOYH7Bha","data":[],"key":"BclGDFZfds"}],"key":"P2MC0k04VC"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Plot Reflectivities, Clutter and Cluttermap","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RSXBqWkl4D"}],"identifier":"plot-reflectivities-clutter-and-cluttermap","label":"Plot Reflectivities, Clutter and Cluttermap","html_id":"plot-reflectivities-clutter-and-cluttermap","implicit":true,"key":"iKlZUCBJHA"}],"key":"rpY9lQHf6c"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"fig = plt.figure(figsize=(15, 12))\nax1 = fig.add_subplot(221)\nfrom osgeo import osr\n\nwgs84 = osr.SpatialReference()\nwgs84.ImportFromEPSG(4326)\n# swp = swp.sel(range=slice(0, 100000)).set_coords(\"sweep_mode\").wrl.georef.georeference(crs=wgs84)\nswp.DBZ_TOT.plot(x=\"x\", y=\"y\", ax=ax1, vmin=0, vmax=60)\nax1.set_title(\"Reflectivity raw\")\nax2 = fig.add_subplot(222)\nswp.CMAP.plot(x=\"x\", y=\"y\", ax=ax2)\nax2.set_title(\"Cluttermap\")\nax3 = fig.add_subplot(223)\nswp.DBZ_TOT.where(swp.CMAP == 1).plot(x=\"x\", y=\"y\", ax=ax3, vmin=0, vmax=60)\nax3.set_title(\"Clutter\")\nax4 = fig.add_subplot(224)\nswp.DBZ_TOT.where(swp.CMAP < 1).plot(x=\"x\", y=\"y\", ax=ax4, vmin=0, vmax=60)\nax4.set_title(\"Reflectivity clutter removed\")","key":"iF3hh0V85y"},{"type":"output","id":"FmOYyL6V6O_Vlw84heRJD","data":[],"key":"DjhKqIzwBU"}],"key":"Rr9voFXXFJ"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Compare with corrected reflectivity from signal processor","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"CTBbeNdzi4"}],"identifier":"compare-with-corrected-reflectivity-from-signal-processor","label":"Compare with corrected reflectivity from signal processor","html_id":"compare-with-corrected-reflectivity-from-signal-processor","implicit":true,"key":"cjZATlkhLG"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"plus additional simple RHOHV filter","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OwrsfcQT0s"}],"key":"tf15mPRlGI"}],"key":"Thq2NdH1QB"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"fig = plt.figure(figsize=(15, 6))\nax1 = fig.add_subplot(121)\nswp.DBZ.plot(x=\"x\", y=\"y\", ax=ax1, vmin=0, vmax=60)\nax1.set_title(\"Reflectivity corr\")\nax2 = fig.add_subplot(122)\nswp.DBZ_TOT.where((swp.CMAP < 1) & (swp.RHOHV >= 0.8)).plot(\n    x=\"x\", y=\"y\", ax=ax2, vmin=0, vmax=60\n)\nax2.set_title(\"Reflectivity clutter removed\")","key":"GgA8dLKBxf"},{"type":"output","id":"Y9AgmUKT6i0cGCt_NUR0R","data":[],"key":"KU0SSFcdv2"}],"key":"uuNA5x3lMd"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"fig = plt.figure(figsize=(8, 5))\nax1 = fig.add_subplot(111)\nswp.CMAP.where(swp.CMAP == 1).plot(x=\"x\", y=\"y\", vmin=0, vmax=1, cmap=\"turbo\")\nax1.set_title(\"Reflectivity corr\")\ndem.DEM.plot(ax=ax1, zorder=-2, cmap=\"terrain\", vmin=0)","key":"zasQ4tjyrp"},{"type":"output","id":"yPEEm15c-OBNtPlonby5O","data":[],"key":"exH1lQS7MM"}],"key":"YbaaSf8eZU"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":1,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Use hvplot for zooming and panning","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"t0zmvfF2Yc"}],"identifier":"use-hvplot-for-zooming-and-panning","label":"Use hvplot for zooming and panning","html_id":"use-hvplot-for-zooming-and-panning","implicit":true,"key":"Gf8S0vb0n8"}],"key":"si2CBPv80a"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We need to rechunk the coordinates as hvplot needs chunked variables and coords.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vPeZXPkY5q"}],"key":"yQlVmCjSYr"}],"key":"ka4xgbNv3Z"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"cl = (\n    swp.CMAP.where(swp.CMAP == 1)\n    .chunk(chunks={})\n    .hvplot.quadmesh(\n        x=\"x\", y=\"y\", cmap=\"turbo\", width=600, height=500, clim=(0, 1), rasterize=True\n    )\n)\ndm = dem.DEM.chunk(chunks={}).hvplot(\n    x=\"x\", y=\"y\", cmap=\"terrain\", width=600, height=500, rasterize=True\n)\ndm * cl","key":"qRyDZhMA9p"},{"type":"output","id":"C8zjrP_tH033ckpZhwdx5","data":[],"key":"a1RFbZ5Agi"}],"key":"JWJVQXBjUw"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"BeamBlockage Calculation","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xWu0GJndM6"}],"identifier":"beamblockage-calculation","label":"BeamBlockage Calculation","html_id":"beamblockage-calculation","implicit":true,"key":"NNv2VBWO8o"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Can you xarray-ify the following, too?","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"fZGVW8ngkY"}],"key":"wXC2eEYtRT"}],"key":"TtOyFzb15b"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"beamradius = wrl.util.half_power_radius(swp.range, bw)\nPBB = wrl.qual.beam_block_frac(swp.DEM.values, swp.z.values, beamradius)\nPBB = np.ma.masked_invalid(PBB)\nCBB = wrl.qual.cum_beam_block_frac(PBB)","key":"tRWL6fBmXO"},{"type":"output","id":"de-TCWV_C8DT_49RNQwzZ","data":[],"key":"zVhpDvUSYg"}],"key":"MZycvaIAPH"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"swp = swp.assign(\n    CBB=([\"azimuth\", \"range\"], CBB),\n    PBB=([\"azimuth\", \"range\"], PBB),\n)","key":"NaKJ7C4CTD"},{"type":"output","id":"3_AWPsN9oJrCBFbpANB2b","data":[],"key":"WCDR8JYj0R"}],"key":"UC0oJkUb5z"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"# just a little helper function to style x and y axes of our maps\ndef annotate_map(ax, cm=None, title=\"\"):\n    # ticks = (ax.get_xticks() / 1000).astype(int)\n    # ax.set_xticklabels(ticks)\n    # ticks = (ax.get_yticks() / 1000).astype(int)\n    # ax.set_yticklabels(ticks)\n    # ax.set_xlabel(\"Kilometers\")\n    # ax.set_ylabel(\"Kilometers\")\n    if not cm is None:\n        plt.colorbar(cm, ax=ax)\n    if not title == \"\":\n        ax.set_title(title)\n    ax.grid()","key":"jo4okc3ohr"},{"type":"output","id":"RtNn_XsAA7GsEH46DyWQ6","data":[],"key":"va3BJ4Lrdw"}],"key":"RMJC51iN8D"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"import matplotlib as mpl\n\nsitecoords = (swp.longitude.values, swp.latitude.values, swp.altitude.values)\nr = swp.range.values\naz = swp.azimuth.values\n\nalt = swp.z.values\nfig = plt.figure(figsize=(15, 12))\n\n# create subplots\nax1 = plt.subplot2grid((2, 2), (0, 0))\nax2 = plt.subplot2grid((2, 2), (0, 1))\nax3 = plt.subplot2grid((2, 2), (1, 0), colspan=2, rowspan=1)\n\n# azimuth angle\nangle = 0\n\n# Plot terrain (on ax1)\ndem_pm = swp.DEM.wrl.vis.plot(ax=ax1, cmap=mpl.cm.terrain, vmin=0.0, add_colorbar=False)\nswp.sel(azimuth=0, method=\"nearest\").plot.scatter(\n    x=\"x\", y=\"y\", marker=\".\", color=\"r\", alpha=0.2, ax=ax1\n)\nax1.plot(swp.longitude.values, swp.latitude.values, \"ro\")\nannotate_map(\n    ax1,\n    dem_pm,\n    \"Terrain within {0} km range\".format(np.max(swp.range.values / 1000.0) + 0.1),\n)\n\n# Plot CBB (on ax2)\ncbb = swp.CBB.wrl.vis.plot(ax=ax2, cmap=mpl.cm.PuRd, vmin=0, vmax=1, add_colorbar=False)\nannotate_map(ax2, cbb, \"Beam-Blockage Fraction\")\n\n# Plot single ray terrain profile on ax3\n(bc,) = ax3.plot(\n    swp.range / 1000.0, swp.z[angle, :], \"-b\", linewidth=3, label=\"Beam Center\"\n)\n(b3db,) = ax3.plot(\n    swp.range.values / 1000.0,\n    (swp.z[angle, :] + beamradius),\n    \":b\",\n    linewidth=1.5,\n    label=\"3 dB Beam width\",\n)\nax3.plot(swp.range / 1000.0, (swp.z[angle, :] - beamradius), \":b\")\nax3.fill_between(swp.range / 1000.0, 0.0, swp.DEM[angle, :], color=\"0.75\")\nax3.set_xlim(0.0, np.max(swp.range / 1000.0) + 0.1)\nax3.set_ylim(0.0, 3000)\nax3.set_xlabel(\"Range (km)\")\nax3.set_ylabel(\"Altitude (m)\")\nax3.grid()\n\naxb = ax3.twinx()\n(bbf,) = axb.plot(swp.range / 1000.0, swp.CBB[angle, :], \"-k\", label=\"BBF\")\naxb.set_ylabel(\"Beam-blockage fraction\")\naxb.set_ylim(0.0, 1.0)\naxb.set_xlim(0.0, np.max(swp.range / 1000.0) + 0.1)\n\n\nlegend = ax3.legend(\n    (bc, b3db, bbf),\n    (\"Beam Center\", \"3 dB Beam width\", \"BBF\"),\n    loc=\"upper left\",\n    fontsize=10,\n)","key":"WVzLpUpWB9"},{"type":"output","id":"l6qt-MNZANsBYYHCP2hle","data":[],"key":"QhSDnhvYeC"}],"key":"g4xo5fbhxU"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Some EyeCandy","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Emhp070h69"}],"identifier":"some-eyecandy","label":"Some EyeCandy","html_id":"some-eyecandy","implicit":true,"key":"vx7tiNOeW1"}],"key":"UTrvC5t78j"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"def height_formatter(x, pos):\n    x = (x - 6370000) / 1000\n    fmt_str = \"{:g}\".format(x)\n    return fmt_str\n\n\ndef range_formatter(x, pos):\n    x = x / 1000.0\n    fmt_str = \"{:g}\".format(x)\n    return fmt_str","key":"IaYnO8a3Ta"},{"type":"output","id":"aXCJcqbAznb9g4O4j1IRj","data":[],"key":"eT0K7dLxiR"}],"key":"CWNYaY905m"},{"type":"block","kind":"notebook-code","children":[{"type":"code","lang":"python","executable":true,"value":"fig = plt.figure(figsize=(10, 6))\n\ncgax, caax, paax = wrl.vis.create_cg(fig=fig, rot=0, scale=1)\n\n# azimuth angle\nangle = 0\n\n# fix grid_helper\ner = 6370000\ngh = cgax.get_grid_helper()\ngh.grid_finder.grid_locator2._nbins = 80\ngh.grid_finder.grid_locator2._steps = [1, 2, 4, 5, 10]\n\n# calculate beam_height and arc_distance for ke=1\n# means line of sight\nbhe = wrl.georef.bin_altitude(r, 0, sitecoords[2], re=er, ke=1.0)\nade = wrl.georef.bin_distance(r, 0, sitecoords[2], re=er, ke=1.0)\nnn0 = np.zeros_like(r)\n# for nice plotting we assume earth_radius = 6370000 m\necp = nn0 + er\n# theta (arc_distance sector angle)\nthetap = -np.degrees(ade / er) + 90.0\n\n# zero degree elevation with standard refraction\nbh0 = wrl.georef.bin_altitude(r, 0, sitecoords[2], re=er)\n\n# plot (ecp is earth surface normal null)\n(bes,) = paax.plot(thetap, ecp, \"-k\", linewidth=3, label=\"Earth Surface NN\")\n(bc,) = paax.plot(thetap, ecp + alt[angle, :], \"-b\", linewidth=3, label=\"Beam Center\")\n(bc0r,) = paax.plot(thetap, ecp + bh0, \"-g\", label=\"0 deg Refraction\")\n(bc0n,) = paax.plot(thetap, ecp + bhe, \"-r\", label=\"0 deg line of sight\")\n(b3db,) = paax.plot(\n    thetap, ecp + alt[angle, :] + beamradius, \":b\", label=\"+3 dB Beam width\"\n)\npaax.plot(thetap, ecp + alt[angle, :] - beamradius, \":b\", label=\"-3 dB Beam width\")\n\n# orography\npaax.fill_between(thetap, ecp, ecp + swp.DEM[angle, :], color=\"0.75\")\n\n# shape axes\ncgax.set_xlim(0, np.max(ade))\ncgax.set_ylim([ecp.min() - 1000, ecp.max() + 2500])\ncaax.grid(True, axis=\"x\")\ncgax.grid(True, axis=\"y\")\ncgax.axis[\"top\"].toggle(all=False)\ncaax.yaxis.set_major_locator(\n    mpl.ticker.MaxNLocator(steps=[1, 2, 4, 5, 10], nbins=20, prune=\"both\")\n)\ncaax.xaxis.set_major_locator(mpl.ticker.MaxNLocator())\ncaax.yaxis.set_major_formatter(mpl.ticker.FuncFormatter(height_formatter))\ncaax.xaxis.set_major_formatter(mpl.ticker.FuncFormatter(range_formatter))\n\ncaax.set_xlabel(\"Range (km)\")\ncaax.set_ylabel(\"Altitude (km)\")\n\nlegend = paax.legend(\n    (bes, bc0n, bc0r, bc, b3db),\n    (\n        \"Earth Surface NN\",\n        \"0 deg line of sight\",\n        \"0 deg std refraction\",\n        \"Beam Center\",\n        \"3 dB Beam width\",\n    ),\n    loc=\"lower left\",\n    fontsize=10,\n)","key":"IqJCnRpCqk"},{"type":"output","id":"92Kk7GogrOkCY4ve2wYnQ","data":[],"key":"oxM0V7f7LH"}],"key":"jDHYIoB8Bx"},{"type":"block","kind":"notebook-content","children":[{"type":"thematicBreak","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hH3acKTsTI"}],"key":"X7vCyP3qmi"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Summary","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VO80mPRKmF"}],"identifier":"summary","label":"Summary","html_id":"summary","implicit":true,"key":"cTJkvXPSdb"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"We’ve just learned how to use ","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"l1YhElGn4g"},{"type":"inlineMath","value":"\\omega radlib","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ω</mi><mi>r</mi><mi>a</mi><mi>d</mi><mi>l</mi><mi>i</mi><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">\\omega radlib</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">ω</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">ib</span></span></span></span>","key":"O09Tda2Ymh"},{"type":"text","value":"’s Gabella clutter detection for single sweeps. We’ve looked into digital elevation maps and beam blockage calculations.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"S9pUEURdkU"}],"key":"VO67oBmXTE"}],"key":"vUOa9eBPoB"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Resources and references","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"vPi3k6Sa2O"}],"identifier":"resources-and-references","label":"Resources and references","html_id":"resources-and-references","implicit":true,"key":"MKP1XChiQd"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":3,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"link","url":"https://docs.xarray.dev","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"xarray","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"aDfRDrbtpZ"}],"urlSource":"https://docs.xarray.dev","key":"O3iAs5eg7A"}],"key":"RZIWJXcsTv"},{"type":"listItem","spread":true,"position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"link","url":"https://docs.dask.org/","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"dask","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"MapDVHNhXA"}],"urlSource":"https://docs.dask.org/","key":"OJpf8JMzRR"}],"key":"XDBMm7PzWl"},{"type":"listItem","spread":true,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"link","url":"https://gdal.org","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"GDAL","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"dL3mKc0YFL"}],"urlSource":"https://gdal.org","key":"iI8Ldy3reu"}],"key":"ZdWlPYR2Eq"},{"type":"listItem","spread":true,"position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"link","url":"https://docs.openradarscience.org/projects/xradar/en/stable/importers.html","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"xradar backends","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"wZ4Soe2uRj"}],"urlSource":"https://docs.openradarscience.org/projects/xradar/en/stable/importers.html","key":"z4udiUMGCd"}],"key":"hIfrtfqEEp"},{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"link","url":"https://ncar.github.io/CfRadial/","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"CfRadial1","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"dcxn3GujMu"}],"urlSource":"https://ncar.github.io/CfRadial/","key":"nWrm3xSy96"}],"key":"QQsEYwXHw8"}],"key":"heKwVSu4f1"}],"key":"qxYO4E0l90"}],"key":"GLNWF8lhPd"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Py-ART Basics with Xradar","url":"/pyart-basics","group":"Py-ART and wradlib"},"next":{"title":"Introduction to GPM-API","url":"/gpm-api-intro","group":"Py-ART and wradlib"}}},"domain":"http://localhost:3000"}